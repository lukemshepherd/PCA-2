{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Vox This is a package for rotating and aligning voxel bones. Repository link Documentation: Class methods docs Functions docs","title":"Home"},{"location":"#vox","text":"This is a package for rotating and aligning voxel bones.","title":"Vox"},{"location":"#repository-link","text":"","title":"Repository link"},{"location":"#documentation","text":"Class methods docs Functions docs","title":"Documentation:"},{"location":"about/","text":"Questions If you have questions about","title":"Questions"},{"location":"about/#questions","text":"If you have questions about","title":"Questions"},{"location":"bone_docs/","text":"Bone class methods: .get_xyz() Convert 3D voxel array to xyz coordinates. array (np.array): 3D voxel array filter_level (int/float): (inherited from bone class) sets the threshold level for what is considered a voxel. Everything below filter level is rounded to 0, everything above rounded to 1 (ie voxel) returns: np.array( [n x 3] ) .get_pca() Performs PCA on the xyz points array xyz(np.array): n x 3 array of xyz coordinates returns: self.pc1 self.pc2 self.pc3 .get_mean() Gets the mean xyz coordinates for xyz array .center_to_origin() Sets the mean of the bone to (0,0,0) .reset_position() Returns bone to original position in space .plot() Plot voxels with optional PCA, and colours user_color (tuple): RGB color of the bone where 1 is maxium eg: red = (1,0,0) www.colortools.net/color_mixer.html is a good tool to work out what the best colour to use is. PCA (boolean): plots the PCAs of the voxel PCA_inv (boolean): plots the inverse of each PCA so the axes go in both directions .dense() up-scales the bone","title":"Bone class methods"},{"location":"bone_docs/#bone-class-methods","text":"","title":"Bone class methods:"},{"location":"bone_docs/#get_xyz","text":"Convert 3D voxel array to xyz coordinates. array (np.array): 3D voxel array filter_level (int/float): (inherited from bone class) sets the threshold level for what is considered a voxel. Everything below filter level is rounded to 0, everything above rounded to 1 (ie voxel) returns: np.array( [n x 3] )","title":".get_xyz()"},{"location":"bone_docs/#get_pca","text":"Performs PCA on the xyz points array xyz(np.array): n x 3 array of xyz coordinates returns: self.pc1 self.pc2 self.pc3","title":".get_pca()"},{"location":"bone_docs/#get_mean","text":"Gets the mean xyz coordinates for xyz array","title":".get_mean()"},{"location":"bone_docs/#center_to_origin","text":"Sets the mean of the bone to (0,0,0)","title":".center_to_origin()"},{"location":"bone_docs/#reset_position","text":"Returns bone to original position in space","title":".reset_position()"},{"location":"bone_docs/#plot","text":"Plot voxels with optional PCA, and colours user_color (tuple): RGB color of the bone where 1 is maxium eg: red = (1,0,0) www.colortools.net/color_mixer.html is a good tool to work out what the best colour to use is. PCA (boolean): plots the PCAs of the voxel PCA_inv (boolean): plots the inverse of each PCA so the axes go in both directions","title":".plot()"},{"location":"bone_docs/#dense","text":"up-scales the bone","title":".dense()"},{"location":"func_docs/","text":"Functions mag(v): Finds magnitude of vector angle(vector1, vector2): Finds the angel between two vectors quaternion_rotation_from_angle(v, c_axis, theta): v = vector (np.array 1x3) c_axis = cross product between two principle conponets theta = angle of rotation (radians) rotate(bone_f1, bone_f2, interpolate=False, scale_factor=2): Alines and rotates bone_f1 to bone_f2 bone = bone class object interpolate = (Boolyon) if True bone_f1 is upscaled, rotated and downscaled to increase point density. scale_factor = set how much the bone will be upscaled to increase the density.","title":"Functions"},{"location":"func_docs/#functions","text":"","title":"Functions"},{"location":"func_docs/#magv","text":"Finds magnitude of vector","title":"mag(v):"},{"location":"func_docs/#anglevector1-vector2","text":"Finds the angel between two vectors","title":"angle(vector1, vector2):"},{"location":"func_docs/#quaternion_rotation_from_anglev-c_axis-theta","text":"v = vector (np.array 1x3) c_axis = cross product between two principle conponets theta = angle of rotation (radians)","title":"quaternion_rotation_from_angle(v, c_axis, theta):"},{"location":"func_docs/#rotatebone_f1-bone_f2-interpolatefalse-scale_factor2","text":"Alines and rotates bone_f1 to bone_f2 bone = bone class object interpolate = (Boolyon) if True bone_f1 is upscaled, rotated and downscaled to increase point density. scale_factor = set how much the bone will be upscaled to increase the density.","title":"rotate(bone_f1, bone_f2, interpolate=False, scale_factor=2):"},{"location":"get_started/","text":"How to use Set custom filter level (optional) bone.filter_level = 0.1 Set custom colour for bone (optional) tibia_f1.default_color = (0.8, 0.3, 0) 1. Load the data that you want to use tibia_f2 = bone.from_matlab_path(matlab_file='phantom/phantom_tibia_f2.mat') tibia_f1 = bone.from_matlab_path(matlab_file='phantom/phantom_tibia_f1.mat') 2. Rotate the bone voxel_rotate(tibia_f1, tibia_f2) 3. Plotting the rotation tibia_f1.plot() tibia_f2.plot() mlab.show() Plotting with mayavi is very similar to matplotplib where you build a scene and call it with show() You can plot bones by calling the .plot() method and then mlab.show() 4. Table of Angles df_angles(tibia_f1, tibia_f2, name='tibia')","title":"Getting started"},{"location":"get_started/#how-to-use","text":"","title":"How to use"},{"location":"get_started/#set-custom-filter-level-optional","text":"bone.filter_level = 0.1","title":"Set custom filter level (optional)"},{"location":"get_started/#set-custom-colour-for-bone-optional","text":"tibia_f1.default_color = (0.8, 0.3, 0)","title":"Set custom colour for bone (optional)"},{"location":"get_started/#1-load-the-data-that-you-want-to-use","text":"tibia_f2 = bone.from_matlab_path(matlab_file='phantom/phantom_tibia_f2.mat') tibia_f1 = bone.from_matlab_path(matlab_file='phantom/phantom_tibia_f1.mat')","title":"1. Load the data that you want to use"},{"location":"get_started/#2-rotate-the-bone","text":"voxel_rotate(tibia_f1, tibia_f2)","title":"2. Rotate the bone"},{"location":"get_started/#3-plotting-the-rotation","text":"tibia_f1.plot() tibia_f2.plot() mlab.show() Plotting with mayavi is very similar to matplotplib where you build a scene and call it with show() You can plot bones by calling the .plot() method and then mlab.show()","title":"3. Plotting the rotation"},{"location":"get_started/#4-table-of-angles","text":"df_angles(tibia_f1, tibia_f2, name='tibia')","title":"4. Table of Angles"},{"location":"install/","text":"How to install Clone conda environment If you use conda environments this is probably the quickest way to install dependencies is to update/ create an environment from my vox_enviroment.yml file. This will install all of the required packages. $ conda env create -f vox_environment.yml $ conda activate vox Installing dependencies Python Python 3.6 and higher mayavi mayavi install docs Mayavi plots images by calling the VTK library and displaying it a qt window- this means it is very very fast, however can be a bit of pain to install. Part of this is caused by its ability to work with different qt packages, which makes it very flexible but does also mean it can get a bit confused! You can use conda to install it but using pip seems to be easier and will sort out the VTK install for you. $ pip install mayavi $ pip install PyQt5 numpy-quaternion Numpy doesn't natively support quaternions as a data type- this package allows you to pass quaternions properly and makes multiplication and returning the imaginary component a lot easier. numpy-quaternion github numpy-quaternion docs $ conda install -c conda-forge quaternion or $ pip install numpy-quaternion numpy-stl Numpy-stl adds support for loading and breaking down stl data. numpy-stl github numpy-stl documentation $ pip install numpy-stl","title":"Installing"},{"location":"install/#how-to-install","text":"","title":"How to install"},{"location":"install/#clone-conda-environment","text":"If you use conda environments this is probably the quickest way to install dependencies is to update/ create an environment from my vox_enviroment.yml file. This will install all of the required packages. $ conda env create -f vox_environment.yml $ conda activate vox","title":"Clone conda environment"},{"location":"install/#installing-dependencies","text":"","title":"Installing dependencies"},{"location":"install/#python","text":"Python 3.6 and higher","title":"Python"},{"location":"install/#mayavi","text":"mayavi install docs Mayavi plots images by calling the VTK library and displaying it a qt window- this means it is very very fast, however can be a bit of pain to install. Part of this is caused by its ability to work with different qt packages, which makes it very flexible but does also mean it can get a bit confused! You can use conda to install it but using pip seems to be easier and will sort out the VTK install for you. $ pip install mayavi $ pip install PyQt5","title":"mayavi"},{"location":"install/#numpy-quaternion","text":"Numpy doesn't natively support quaternions as a data type- this package allows you to pass quaternions properly and makes multiplication and returning the imaginary component a lot easier. numpy-quaternion github numpy-quaternion docs $ conda install -c conda-forge quaternion or $ pip install numpy-quaternion","title":"numpy-quaternion"},{"location":"install/#numpy-stl","text":"Numpy-stl adds support for loading and breaking down stl data. numpy-stl github numpy-stl documentation $ pip install numpy-stl","title":"numpy-stl"},{"location":"interpolation/","text":"Voxel Interpolation What is the issue/ When you rotate the bone the out puts are decimals which cant be put back into the voxel array by upscaling the voxel more of the coordinates are integers and so reduces the resolution loss when converting back into an array.","title":"Interpolation"},{"location":"interpolation/#voxel-interpolation","text":"","title":"Voxel Interpolation"},{"location":"interpolation/#what-is-the-issue","text":"When you rotate the bone the out puts are decimals which cant be put back into the voxel array by upscaling the voxel more of the coordinates are integers and so reduces the resolution loss when converting back into an array.","title":"What is the issue/"},{"location":"stl/","text":"STL files STL objects are treated pretty much the same as normal voxel objects. They can be rotated/plotted etc. Also they can be used with voxel ones- i.e you can rotate an stl by a voxel. Loading data: tibia_stl = bone.from_stl_path(stl_file='phantom/phantom_tibia_f2.stl') How the data is stored The full stl data is stored in tibia_stl.data The stl files are loaded from numpy-stl module Saving bones back into .stl tibia_stl.data.save('file.stl')","title":"STL objects"},{"location":"stl/#stl-files","text":"STL objects are treated pretty much the same as normal voxel objects. They can be rotated/plotted etc. Also they can be used with voxel ones- i.e you can rotate an stl by a voxel.","title":"STL files"},{"location":"stl/#loading-data","text":"tibia_stl = bone.from_stl_path(stl_file='phantom/phantom_tibia_f2.stl')","title":"Loading data:"},{"location":"stl/#how-the-data-is-stored","text":"The full stl data is stored in tibia_stl.data The stl files are loaded from numpy-stl module","title":"How the data is stored"},{"location":"stl/#saving-bones-back-into-stl","text":"tibia_stl.data.save('file.stl')","title":"Saving bones back into .stl"}]}