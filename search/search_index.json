{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Vox This is a package for rotating and alining voxel bones. Repository link github.com/lukemshepherd/vox","title":"Home"},{"location":"#vox","text":"This is a package for rotating and alining voxel bones.","title":"Vox"},{"location":"#repository-link","text":"github.com/lukemshepherd/vox","title":"Repository link"},{"location":"about/","text":"Questions If you have questions about","title":"Questions"},{"location":"about/#questions","text":"If you have questions about","title":"Questions"},{"location":"bone_docs/","text":"Bone class meathods: .get_xyz() .get_pca() .get_mean() .center_to_origin() .reset_position() .plot() .dense()","title":"Bone class meathods"},{"location":"bone_docs/#bone-class-meathods","text":"","title":"Bone class meathods:"},{"location":"bone_docs/#get_xyz","text":"","title":".get_xyz()"},{"location":"bone_docs/#get_pca","text":"","title":".get_pca()"},{"location":"bone_docs/#get_mean","text":"","title":".get_mean()"},{"location":"bone_docs/#center_to_origin","text":"","title":".center_to_origin()"},{"location":"bone_docs/#reset_position","text":"","title":".reset_position()"},{"location":"bone_docs/#plot","text":"","title":".plot()"},{"location":"bone_docs/#dense","text":"","title":".dense()"},{"location":"func_docs/","text":"Functions mag: Finds magnitude of vector angle: quaternion_rotation_from_angle (v, c_axis, theta): v = vector np.array 1x3 c_axis = cross product between two principle conponets theta = angle of rotation (radians) voxel_rotate (bone_f1, bone_f2): bone = bone class object","title":"Functions"},{"location":"func_docs/#functions","text":"","title":"Functions"},{"location":"func_docs/#mag","text":"Finds magnitude of vector","title":"mag:"},{"location":"func_docs/#angle","text":"","title":"angle:"},{"location":"func_docs/#quaternion_rotation_from_angle","text":"(v, c_axis, theta): v = vector np.array 1x3 c_axis = cross product between two principle conponets theta = angle of rotation (radians)","title":"quaternion_rotation_from_angle"},{"location":"func_docs/#voxel_rotate","text":"(bone_f1, bone_f2): bone = bone class object","title":"voxel_rotate"},{"location":"get_started/","text":"How to use Set custom filter level (optional) bone.filter_level = 0.1 Set custom colour for bone (optional) tibia_f1.default_color = (0.8, 0.3, 0) 1. Load the data that you want to use tibia_f2 = bone.from_matlab_path(matlab_file='phantom/phantom_tibia_f2.mat') tibia_f1 = bone.from_matlab_path(matlab_file='phantom/phantom_tibia_f1.mat') 2. Rotate the Bone voxel_rotate(tibia_f1, tibia_f2) 3. Plotting the Rotation tibia_f1.plot() tibia_f2.plot() mlab.show() Plotting with mayavi is very similar to matplotplib where you build a scene and call it with show() You can plot bones by calling the .plot() method and then mlab.show() 4. Table of Angles df_angles(tibia_f1, tibia_f2, name='tibia')","title":"Getting started"},{"location":"get_started/#how-to-use","text":"","title":"How to use"},{"location":"get_started/#set-custom-filter-level-optional","text":"bone.filter_level = 0.1","title":"Set custom filter level (optional)"},{"location":"get_started/#set-custom-colour-for-bone-optional","text":"tibia_f1.default_color = (0.8, 0.3, 0)","title":"Set custom colour for bone (optional)"},{"location":"get_started/#1-load-the-data-that-you-want-to-use","text":"tibia_f2 = bone.from_matlab_path(matlab_file='phantom/phantom_tibia_f2.mat') tibia_f1 = bone.from_matlab_path(matlab_file='phantom/phantom_tibia_f1.mat')","title":"1. Load the data that you want to use"},{"location":"get_started/#2-rotate-the-bone","text":"voxel_rotate(tibia_f1, tibia_f2)","title":"2. Rotate the Bone"},{"location":"get_started/#3-plotting-the-rotation","text":"tibia_f1.plot() tibia_f2.plot() mlab.show() Plotting with mayavi is very similar to matplotplib where you build a scene and call it with show() You can plot bones by calling the .plot() method and then mlab.show()","title":"3. Plotting the Rotation"},{"location":"get_started/#4-table-of-angles","text":"df_angles(tibia_f1, tibia_f2, name='tibia')","title":"4. Table of Angles"},{"location":"install/","text":"How to install Clone conda environment If you use conda environments this is probably the quickest way to install dependencies is to update/ create an environment from my vox_enviroment.yml file. This will install all of the required packages. $ conda env create -f environment.yml $ conda activate vox Installing dependencies Python This was written on python 3.6. Python 2 versions won't work due to the use of f strings mayavi mayavi install docs Mayavi plots images by calling the VTK libray and displying it a qt window- this means it is very very fast, however can be a bit of pain to install. Part of this is caused by its abity to work with difent qt packages, which makes it very flexable but does also mean it can get a bit confused! You can use conda to install it but using pip seems to be easier and will sort out the VTK install for you. $ pip install mayavi $ pip install PyQt5 numpy-quaternion Numpy doesn't nativly suport quaternions as a data type- this package always you to pass quaterions properly and makes muliplication and returning the imaginary conponent a lot easier. numpy-quaternion github numpy-quaternion docs $ conda install -c conda-forge quaternion or $ pip install numpy-quaternion","title":"Installing"},{"location":"install/#how-to-install","text":"","title":"How to install"},{"location":"install/#clone-conda-environment","text":"If you use conda environments this is probably the quickest way to install dependencies is to update/ create an environment from my vox_enviroment.yml file. This will install all of the required packages. $ conda env create -f environment.yml $ conda activate vox","title":"Clone conda environment"},{"location":"install/#installing-dependencies","text":"","title":"Installing dependencies"},{"location":"install/#python","text":"This was written on python 3.6. Python 2 versions won't work due to the use of f strings","title":"Python"},{"location":"install/#mayavi","text":"mayavi install docs Mayavi plots images by calling the VTK libray and displying it a qt window- this means it is very very fast, however can be a bit of pain to install. Part of this is caused by its abity to work with difent qt packages, which makes it very flexable but does also mean it can get a bit confused! You can use conda to install it but using pip seems to be easier and will sort out the VTK install for you. $ pip install mayavi $ pip install PyQt5","title":"mayavi"},{"location":"install/#numpy-quaternion","text":"Numpy doesn't nativly suport quaternions as a data type- this package always you to pass quaterions properly and makes muliplication and returning the imaginary conponent a lot easier. numpy-quaternion github numpy-quaternion docs $ conda install -c conda-forge quaternion or $ pip install numpy-quaternion","title":"numpy-quaternion"}]}